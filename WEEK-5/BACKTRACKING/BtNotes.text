Backtracking - Comprehensive Notes

Introduction to Backtracking

Backtracking is an algorithmic technique for solving problems recursively by trying to build a solution incrementally, removing the solutions that fail to meet the problem's constraints.

When to Use Backtracking?

When the problem requires all possible solutions.

When there are constraints to be followed.

When brute-force is inefficient, and a pruned search space can improve efficiency.

Key Concept:

Choice - Choose an option from available ones.

Constraints - Check if the choice satisfies problem constraints.

Goal - If the goal is achieved, record the solution.

Backtrack - If constraints are not met, undo the last choice and try another option.

Types of Backtracking Problems

1Ô∏è‚É£ Subset Generation / Power Set

Problem: Generate all subsets of a given set.

Approach:

Either include or exclude an element in the current subset.

Recursively explore both possibilities.

Example Problems:

Subsets (LeetCode 78)

Combination Sum (LeetCode 39)

2Ô∏è‚É£ Permutations

Problem: Generate all possible orderings of elements.

Approach:

Swap elements to generate permutations.

Use a boolean array or in-place swapping to mark used elements.

Example Problems:

Permutations (LeetCode 46)

Permutations II (with duplicates) (LeetCode 47)

3Ô∏è‚É£ Combinations

Problem: Select k elements from n elements.

Approach:

Use a recursive function to explore choices while ensuring order.

Stop recursion when k elements are selected.

Example Problems:

Combinations (LeetCode 77)

Combination Sum (LeetCode 39 & 40)

4Ô∏è‚É£ Sudoku Solver / Constraint Satisfaction Problems

Problem: Fill a grid following specific rules.

Approach:

Find an empty cell, try possible values, and recursively solve.

Use pruning to eliminate invalid numbers early.

Example Problems:

Sudoku Solver (LeetCode 37)

N-Queens (LeetCode 51)

5Ô∏è‚É£ Graph-Based Backtracking Problems

Problem: Finding paths in a graph with constraints.

Approach:

DFS-style exploration with pruning.

Use visited sets to avoid revisiting nodes.

Example Problems:

Rat in a Maze (Pathfinding in a grid)

Word Search (LeetCode 79)

Hamiltonian Path / Cycle

6Ô∏è‚É£ Word-Based Problems (Crosswords, Word Search)

Problem: Find valid words within a grid.

Approach:

Use DFS from each letter.

Use Trie data structure for efficiency (if multiple queries).

Example Problems:

Word Search (LeetCode 79)

Word Break (Backtracking + Memoization) (LeetCode 140)

7Ô∏è‚É£ Constraint-Based Problems (Knight‚Äôs Tour, N-Queens)

Problem: Find a valid arrangement under specific conditions.

Approach:

Try placing the element and check if constraints hold.

If not, backtrack and try another option.

Example Problems:

N-Queens (LeetCode 51 & 52)

Knight‚Äôs Tour

Optimizations in Backtracking

Pruning: Stop early when a condition is not met.

Using HashSets/Arrays: To keep track of visited elements.

Sorting: Helps in pruning redundant choices early.

Bitmasking: Used in some combinatorial problems for optimization.

Memoization: Used with backtracking in some DP problems.

Backtracking Template (General Form)

void backtrack(List<Integer> state, int start, List<List<Integer>> result) {
    if (isValid(state)) {
        result.add(new ArrayList<>(state));
        return;
    }
    
    for (int i = start; i < choices.length; i++) {
        state.add(choices[i]); // Make a choice
        backtrack(state, i + 1, result); // Recur
        state.remove(state.size() - 1); // Undo choice
    }
}

-----------------------------------------------------------------------------------
General Backtracking Template

void backtrack(List<Integer> state, int start, List<List<Integer>> result) {
    if (isValid(state)) {  // Base case: valid solution
        result.add(new ArrayList<>(state));
        return;
    }
    
    for (int i = start; i < choices.length; i++) {
        state.add(choices[i]); // Make a choice
        backtrack(state, i + 1, result); // Recur
        state.remove(state.size() - 1); // Undo choice
    }
}

üî• Problem-wise Cheatsheet

1Ô∏è‚É£ Subset Generation (Power Set)

üîπ Approach:

Include or exclude each element.

Recursively explore both choices.

Stop when all elements are considered.

üöÄ Code:

void generateSubsets(int[] nums, int index, List<Integer> current, List<List<Integer>> result) {
    result.add(new ArrayList<>(current));
    for (int i = index; i < nums.length; i++) {
        current.add(nums[i]);
        generateSubsets(nums, i + 1, current, result);
        current.remove(current.size() - 1);
    }
}

2Ô∏è‚É£ Permutations

üîπ Approach:

Swap elements to generate different orders.

Use a boolean array to track used elements.

Restore state after recursion.

üöÄ Code:

void permute(int[] nums, List<Integer> current, boolean[] used, List<List<Integer>> result) {
    if (current.size() == nums.length) {
        result.add(new ArrayList<>(current));
        return;
    }
    for (int i = 0; i < nums.length; i++) {
        if (used[i]) continue;
        used[i] = true;
        current.add(nums[i]);
        permute(nums, current, used, result);
        current.remove(current.size() - 1);
        used[i] = false;
    }
}

3Ô∏è‚É£ Combinations

üîπ Approach:

Select k elements out of n.

Use recursion with an index to avoid duplicates.

üöÄ Code:

void combine(int n, int k, int start, List<Integer> current, List<List<Integer>> result) {
    if (current.size() == k) {
        result.add(new ArrayList<>(current));
        return;
    }
    for (int i = start; i <= n; i++) {
        current.add(i);
        combine(n, k, i + 1, current, result);
        current.remove(current.size() - 1);
    }
}

4Ô∏è‚É£ N-Queens Problem

üîπ Approach:

Place queens row by row.

Use boolean arrays to check column and diagonals.

Backtrack when constraints are violated.

üöÄ Code:

void solveNQueens(int n, int row, char[][] board, List<List<String>> result, boolean[] cols, boolean[] diag1, boolean[] diag2) {
    if (row == n) {
        result.add(construct(board));
        return;
    }
    for (int col = 0; col < n; col++) {
        if (cols[col] || diag1[row + col] || diag2[row - col + n - 1]) continue;
        board[row][col] = 'Q';
        cols[col] = diag1[row + col] = diag2[row - col + n - 1] = true;
        solveNQueens(n, row + 1, board, result, cols, diag1, diag2);
        board[row][col] = '.';
        cols[col] = diag1[row + col] = diag2[row - col + n - 1] = false;
    }
}

5Ô∏è‚É£ Sudoku Solver

üîπ Approach:

Find an empty cell.

Try placing digits from 1 to 9.

Validate and backtrack if needed.

üöÄ Code:

boolean solveSudoku(char[][] board) {
    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            if (board[i][j] == '.') {
                for (char num = '1'; num <= '9'; num++) {
                    if (isValid(board, i, j, num)) {
                        board[i][j] = num;
                        if (solveSudoku(board)) return true;
                        board[i][j] = '.';
                    }
                }
                return false;
            }
        }
    }
    return true;
}

6Ô∏è‚É£ Word Search

üîπ Approach:

DFS from each cell.

Mark visited cells to avoid revisiting.

Backtrack to restore state.

üöÄ Code:

boolean exist(char[][] board, String word) {
    for (int i = 0; i < board.length; i++) {
        for (int j = 0; j < board[0].length; j++) {
            if (dfs(board, word, 0, i, j)) return true;
        }
    }
    return false;
}

boolean dfs(char[][] board, String word, int index, int i, int j) {
    if (index == word.length()) return true;
    if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != word.charAt(index)) return false;
    
    char temp = board[i][j];
    board[i][j] = '#'; // Mark as visited
    boolean found = dfs(board, word, index + 1, i + 1, j) ||
                    dfs(board, word, index + 1, i - 1, j) ||
                    dfs(board, word, index + 1, i, j + 1) ||
                    dfs(board, word, index + 1, i, j - 1);
    board[i][j] = temp; // Restore state
    return found;
}

üî• Backtracking Tips & Tricks

‚úÖ Use pruning (e.g., skip unnecessary calls, limit recursion depth).
‚úÖ Track visited elements efficiently using arrays/sets.
‚úÖ Try sorting the input to process promising branches first.
‚úÖ Combine with dynamic programming for optimization.
‚úÖ Apply bitmasking to solve subset problems efficiently.

Summary

Problem Type

Key Idea

Subset Generation

Include or exclude elements

Permutations

Swap elements to create unique orders

Combinations

Choose k elements out of n

Sudoku Solver

Fill empty spots recursively with constraints

Graph Problems

DFS with backtracking constraints

Word Search

DFS from each letter

N-Queens

Place elements with constraints

