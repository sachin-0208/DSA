**Two Pointer & Sliding Window Techniques in Arrays - Notes & Tricks**

## **1. Two Pointer Technique**
### **Concept:**
- Maintain two pointers (`left` and `right`) to traverse an array efficiently.
- Used when **sorting** or **searching** is involved.

### **Example: Finding a Pair with Target Sum in a Sorted Array**
```java
public boolean twoSumSorted(int[] nums, int target) {
    int left = 0, right = nums.length - 1;
    while (left < right) {
        int sum = nums[left] + nums[right];
        if (sum == target) return true;
        else if (sum < target) left++;
        else right--;
    }
    return false;
}
```
---

## **2. Sliding Window Technique**
### **Concept:**
- Maintain a **window** (subarray) and adjust its size dynamically.
- Used in problems involving **subarrays, substrings, or sequences**.

### **Example: Longest Substring Without Repeating Characters**
```java
public int lengthOfLongestSubstring(String s) {
    int[] map = new int[128]; // Stores last index of characters
    int left = 0, maxLen = 0;
    for (int right = 0; right < s.length(); right++) {
        left = Math.max(map[s.charAt(right)], left);
        maxLen = Math.max(maxLen, right - left + 1);
        map[s.charAt(right)] = right + 1;
    }
    return maxLen;
}
```
---

## **3. Fixed-Size Sliding Window**
- Maintain a window of **fixed size `k`**.

### **Example: Maximum Sum of Subarray of Size K**
```java
public int maxSumSubarray(int[] nums, int k) {
    int maxSum = 0, windowSum = 0;
    for (int i = 0; i < k; i++) windowSum += nums[i];
    for (int i = k; i < nums.length; i++) {
        windowSum += nums[i] - nums[i - k];
        maxSum = Math.max(maxSum, windowSum);
    }
    return maxSum;
}
```
---

## **4. Variable-Size Sliding Window**
- Expand and contract the window dynamically based on conditions.

### **Example: Smallest Subarray with Sum â‰¥ Target**
```java
public int minSubArrayLen(int target, int[] nums) {
    int left = 0, sum = 0, minLen = Integer.MAX_VALUE;
    for (int right = 0; right < nums.length; right++) {
        sum += nums[right];
        while (sum >= target) {
            minLen = Math.min(minLen, right - left + 1);
            sum -= nums[left++];
        }
    }
    return minLen == Integer.MAX_VALUE ? 0 : minLen;
}
```
---

## **5. Merging Intervals (Two Pointer Approach)**
- Used when intervals are sorted.

### **Example: Merge Overlapping Intervals**
```java
public int[][] merge(int[][] intervals) {
    Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
    List<int[]> merged = new ArrayList<>();
    for (int[] interval : intervals) {
        if (!merged.isEmpty() && merged.get(merged.size() - 1)[1] >= interval[0])
            merged.get(merged.size() - 1)[1] = Math.max(merged.get(merged.size() - 1)[1], interval[1]);
        else merged.add(interval);
    }
    return merged.toArray(new int[merged.size()][]);
}
```
---

## **6. Two Pointers for Sorting Based Problems**
- Works efficiently in problems involving sorting and rearranging.

### **Example: Sort Colors (Dutch National Flag Algorithm)**
```java
public void sortColors(int[] nums) {
    int low = 0, mid = 0, high = nums.length - 1;
    while (mid <= high) {
        if (nums[mid] == 0) swap(nums, low++, mid++);
        else if (nums[mid] == 1) mid++;
        else swap(nums, mid, high--);
    }
}
```
---

## **7. Maximum Consecutive Ones (Sliding Window)**
```java
public int findMaxConsecutiveOnes(int[] nums) {
    int maxOnes = 0, count = 0;
    for (int num : nums) {
        count = (num == 1) ? count + 1 : 0;
        maxOnes = Math.max(maxOnes, count);
    }
    return maxOnes;
}
```
---

## **8. Two Pointer Approach for Removing Duplicates**
- Efficient for in-place modifications.

### **Example: Remove Duplicates from Sorted Array**
```java
public int removeDuplicates(int[] nums) {
    int index = 1;
    for (int i = 1; i < nums.length; i++) {
        if (nums[i] != nums[i - 1]) nums[index++] = nums[i];
    }
    return index;
}
```
---

## **9. Sliding Window for Longest Ones with K Flips**
```java
public int longestOnes(int[] nums, int k) {
    int left = 0, maxLen = 0;
    for (int right = 0; right < nums.length; right++) {
        if (nums[right] == 0) k--;
        while (k < 0) {
            if (nums[left] == 0) k++;
            left++;
        }
        maxLen = Math.max(maxLen, right - left + 1);
    }
    return maxLen;
}
```
---

## **10. Always Consider Edge Cases**
- Empty array
- Single element cases
- Already sorted or reverse sorted arrays
- Large values causing integer overflow

---
These are some of the most useful tricks and shortcodes for solving problems using **two pointers & sliding window techniques** efficiently!
------------------------------------------------- GENERAL TRICKS and TIPS ----------------------------------------------

**General Array Tricks & Tips for Problem Solving**

## **1. Find the Missing Number in a Range (XOR Trick)**
- If one number is missing from 1 to N:
```java
public int missingNumber(int[] nums) {
    int xor = 0, n = nums.length;
    for (int i = 0; i <= n; i++) xor ^= i;
    for (int num : nums) xor ^= num;
    return xor;
}
```
- **Time Complexity:** O(N), **Space Complexity:** O(1)
---

## **2. Find Duplicates in an Array (Cycle Detection)**
- Uses **Floydâ€™s Cycle Detection Algorithm**.
```java
public int findDuplicate(int[] nums) {
    int slow = nums[0], fast = nums[0];
    do {
        slow = nums[slow];
        fast = nums[nums[fast]];
    } while (slow != fast);
    slow = nums[0];
    while (slow != fast) {
        slow = nums[slow];
        fast = nums[fast];
    }
    return slow;
}
```
---

## **3. Kadaneâ€™s Algorithm (Maximum Subarray Sum)**
```java
public int maxSubArray(int[] nums) {
    int maxSum = nums[0], curSum = 0;
    for (int num : nums) {
        curSum = Math.max(num, curSum + num);
        maxSum = Math.max(maxSum, curSum);
    }
    return maxSum;
}
```
---

## **4. Majority Element (> N/2 times) (Boyer-Moore Voting Algorithm)**
```java
public int majorityElement(int[] nums) {
    int count = 0, candidate = 0;
    for (int num : nums) {
        if (count == 0) candidate = num;
        count += (num == candidate) ? 1 : -1;
    }
    return candidate;
}
```
---

## **5. Find Intersection of Two Arrays (Set-Based Approach)**
```java
public int[] intersection(int[] nums1, int[] nums2) {
    Set<Integer> set1 = new HashSet<>(), result = new HashSet<>();
    for (int num : nums1) set1.add(num);
    for (int num : nums2) if (set1.contains(num)) result.add(num);
    return result.stream().mapToInt(i -> i).toArray();
}
```
---

## **6. Product of Array Except Self (Prefix & Suffix Multiplication)**
```java
public int[] productExceptSelf(int[] nums) {
    int n = nums.length, prod = 1;
    int[] output = new int[n];
    Arrays.fill(output, 1);
    for (int i = 0; i < n; i++) {
        output[i] *= prod;
        prod *= nums[i];
    }
    prod = 1;
    for (int i = n - 1; i >= 0; i--) {
        output[i] *= prod;
        prod *= nums[i];
    }
    return output;
}
```
---

## **7. Find First and Last Position of an Element (Binary Search Approach)**
```java
public int[] searchRange(int[] nums, int target) {
    return new int[]{findIndex(nums, target, true), findIndex(nums, target, false)};
}
private int findIndex(int[] nums, int target, boolean first) {
    int left = 0, right = nums.length - 1, result = -1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (nums[mid] == target) {
            result = mid;
            if (first) right = mid - 1;
            else left = mid + 1;
        } else if (nums[mid] < target) left = mid + 1;
        else right = mid - 1;
    }
    return result;
}
```
---

## **8. Rotate Array by K Places (Reverse Trick)**
```java
public void rotate(int[] nums, int k) {
    k %= nums.length;
    reverse(nums, 0, nums.length - 1);
    reverse(nums, 0, k - 1);
    reverse(nums, k, nums.length - 1);
}
private void reverse(int[] nums, int left, int right) {
    while (left < right) {
        int temp = nums[left];
        nums[left++] = nums[right];
        nums[right--] = temp;
    }
}
```
---

## **9. Find Two Numbers That Sum Up to Target (Two-Pointer Method)**
```java
public int[] twoSum(int[] nums, int target) {
    Arrays.sort(nums);
    int left = 0, right = nums.length - 1;
    while (left < right) {
        int sum = nums[left] + nums[right];
        if (sum == target) return new int[]{nums[left], nums[right]};
        else if (sum < target) left++;
        else right--;
    }
    return new int[]{};
}
```
---

## **10. Next Permutation (Lexicographical Order Trick)**
```java
public void nextPermutation(int[] nums) {
    int i = nums.length - 2;
    while (i >= 0 && nums[i] >= nums[i + 1]) i--;
    if (i >= 0) {
        int j = nums.length - 1;
        while (nums[j] <= nums[i]) j--;
        swap(nums, i, j);
    }
    reverse(nums, i + 1, nums.length - 1);
}
private void swap(int[] nums, int i, int j) {
    int temp = nums[i];
    nums[i] = nums[j];
    nums[j] = temp;
}
private void reverse(int[] nums, int start, int end) {
    while (start < end) swap(nums, start++, end--);
}
```
---

These **10 tricks** cover fundamental **array problem-solving techniques** commonly asked in coding interviews. ðŸš€ Let me know if you need more details!

**General Array Tricks & Tips for Problem Solving (Set 2)**

## **1. Check if an Array is Sorted**
```java
public boolean isSorted(int[] nums) {
    for (int i = 1; i < nums.length; i++) {
        if (nums[i] < nums[i - 1]) return false;
    }
    return true;
}
```
---

## **2. Find the Second Largest Element**
```java
public int secondLargest(int[] nums) {
    int first = Integer.MIN_VALUE, second = Integer.MIN_VALUE;
    for (int num : nums) {
        if (num > first) {
            second = first;
            first = num;
        } else if (num > second && num != first) {
            second = num;
        }
    }
    return second;
}
```
---

## **3. Count Inversions in an Array (Merge Sort Trick)**
```java
public int countInversions(int[] nums) {
    return mergeSort(nums, new int[nums.length], 0, nums.length - 1);
}
private int mergeSort(int[] nums, int[] temp, int left, int right) {
    if (left >= right) return 0;
    int mid = (left + right) / 2, count = 0;
    count += mergeSort(nums, temp, left, mid);
    count += mergeSort(nums, temp, mid + 1, right);
    count += merge(nums, temp, left, mid, right);
    return count;
}
private int merge(int[] nums, int[] temp, int left, int mid, int right) {
    int i = left, j = mid + 1, k = left, count = 0;
    while (i <= mid && j <= right) {
        if (nums[i] <= nums[j]) temp[k++] = nums[i++];
        else {
            temp[k++] = nums[j++];
            count += (mid - i + 1);
        }
    }
    while (i <= mid) temp[k++] = nums[i++];
    while (j <= right) temp[k++] = nums[j++];
    System.arraycopy(temp, left, nums, left, right - left + 1);
    return count;
}
```
---

## **4. Find Subarray with Given Sum (Sliding Window)**
```java
public boolean hasSubarrayWithSum(int[] nums, int target) {
    int left = 0, sum = 0;
    for (int right = 0; right < nums.length; right++) {
        sum += nums[right];
        while (sum > target) sum -= nums[left++];
        if (sum == target) return true;
    }
    return false;
}
```
---

## **5. Find the Equilibrium Index**
```java
public int equilibriumIndex(int[] nums) {
    int totalSum = 0, leftSum = 0;
    for (int num : nums) totalSum += num;
    for (int i = 0; i < nums.length; i++) {
        totalSum -= nums[i];
        if (leftSum == totalSum) return i;
        leftSum += nums[i];
    }
    return -1;
}
```
---

## **6. Rearrange Array in Alternate Positive & Negative Order**
```java
public void rearrange(int[] nums) {
    List<Integer> pos = new ArrayList<>(), neg = new ArrayList<>();
    for (int num : nums) {
        if (num >= 0) pos.add(num);
        else neg.add(num);
    }
    int i = 0, j = 0, k = 0;
    while (i < pos.size() && j < neg.size()) {
        nums[k++] = pos.get(i++);
        nums[k++] = neg.get(j++);
    }
    while (i < pos.size()) nums[k++] = pos.get(i++);
    while (j < neg.size()) nums[k++] = neg.get(j++);
}
```
---

## **7. Find Peak Element in an Array (Binary Search Approach)**
```java
public int findPeakElement(int[] nums) {
    int left = 0, right = nums.length - 1;
    while (left < right) {
        int mid = left + (right - left) / 2;
        if (nums[mid] > nums[mid + 1]) right = mid;
        else left = mid + 1;
    }
    return left;
}
```
---

## **8. Find Maximum Product Subarray**
```java
public int maxProduct(int[] nums) {
    int maxProd = nums[0], minProd = nums[0], result = nums[0];
    for (int i = 1; i < nums.length; i++) {
        if (nums[i] < 0) {
            int temp = maxProd;
            maxProd = minProd;
            minProd = temp;
        }
        maxProd = Math.max(nums[i], maxProd * nums[i]);
        minProd = Math.min(nums[i], minProd * nums[i]);
        result = Math.max(result, maxProd);
    }
    return result;
}
```
---

## **9. Find the Largest Rectangle in Histogram (Stack-Based Approach)**
```java
public int largestRectangleArea(int[] heights) {
    Stack<Integer> stack = new Stack<>();
    int maxArea = 0;
    for (int i = 0; i <= heights.length; i++) {
        int h = (i == heights.length) ? 0 : heights[i];
        while (!stack.isEmpty() && h < heights[stack.peek()]) {
            int height = heights[stack.pop()];
            int width = stack.isEmpty() ? i : i - stack.peek() - 1;
            maxArea = Math.max(maxArea, height * width);
        }
        stack.push(i);
    }
    return maxArea;
}
```
---

## **10. Count Subarrays with Equal Number of 0s and 1s (HashMap Trick)**
```java
public int countEqualZeroOne(int[] nums) {
    Map<Integer, Integer> map = new HashMap<>();
    int sum = 0, count = 0;
    map.put(0, 1);
    for (int num : nums) {
        sum += (num == 0) ? -1 : 1;
        count += map.getOrDefault(sum, 0);
        map.put(sum, map.getOrDefault(sum, 0) + 1);
    }
    return count;
}
```
---

These **10 additional tricks** provide efficient solutions for array-based problems in **sorting, searching, subarrays, and optimizations**. ðŸš€ Let me know if you need more details!




-----------------------------------------------------------ADVANCE------------------------------------------------------

**Advanced Two Pointer & Sliding Window Tricks**

## **1. Two Pointers for Finding Triplets with Target Sum**
- Works when the array is **sorted**.

```java
public List<List<Integer>> threeSum(int[] nums) {
    Arrays.sort(nums);
    List<List<Integer>> result = new ArrayList<>();
    for (int i = 0; i < nums.length - 2; i++) {
        if (i > 0 && nums[i] == nums[i - 1]) continue; // Skip duplicates
        int left = i + 1, right = nums.length - 1;
        while (left < right) {
            int sum = nums[i] + nums[left] + nums[right];
            if (sum == 0) {
                result.add(Arrays.asList(nums[i], nums[left], nums[right]));
                while (left < right && nums[left] == nums[left + 1]) left++;
                while (left < right && nums[right] == nums[right - 1]) right--;
                left++; right--;
            } else if (sum < 0) left++;
            else right--;
        }
    }
    return result;
}
```
---

## **2. Longest Subarray with at Most K Distinct Elements (Sliding Window)**
```java
public int longestKDistinct(int[] nums, int k) {
    Map<Integer, Integer> map = new HashMap<>();
    int left = 0, maxLen = 0;
    for (int right = 0; right < nums.length; right++) {
        map.put(nums[right], map.getOrDefault(nums[right], 0) + 1);
        while (map.size() > k) {
            map.put(nums[left], map.get(nums[left]) - 1);
            if (map.get(nums[left]) == 0) map.remove(nums[left]);
            left++;
        }
        maxLen = Math.max(maxLen, right - left + 1);
    }
    return maxLen;
}
```
---

## **3. Minimum Window Substring (Sliding Window + HashMap)**
```java
public String minWindow(String s, String t) {
    if (s.length() < t.length()) return "";
    Map<Character, Integer> map = new HashMap<>();
    for (char c : t.toCharArray()) map.put(c, map.getOrDefault(c, 0) + 1);
    int left = 0, count = 0, minLen = Integer.MAX_VALUE, start = 0;
    for (int right = 0; right < s.length(); right++) {
        char c = s.charAt(right);
        if (map.containsKey(c)) {
            map.put(c, map.get(c) - 1);
            if (map.get(c) >= 0) count++;
        }
        while (count == t.length()) {
            if (right - left + 1 < minLen) {
                minLen = right - left + 1;
                start = left;
            }
            char leftChar = s.charAt(left++);
            if (map.containsKey(leftChar)) {
                if (map.get(leftChar) == 0) count--;
                map.put(leftChar, map.get(leftChar) + 1);
            }
        }
    }
    return minLen == Integer.MAX_VALUE ? "" : s.substring(start, start + minLen);
}
```
---

## **4. Find the Maximum Sum of Any Contiguous Subarray of Size K**
```java
public int maxSumSubarray(int[] nums, int k) {
    int maxSum = 0, windowSum = 0;
    for (int i = 0; i < k; i++) windowSum += nums[i];
    for (int i = k; i < nums.length; i++) {
        windowSum += nums[i] - nums[i - k];
        maxSum = Math.max(maxSum, windowSum);
    }
    return maxSum;
}
```
---

## **5. Finding the Longest Mountain in an Array (Two Pointers)**
```java
public int longestMountain(int[] arr) {
    int maxLen = 0;
    for (int i = 1; i < arr.length - 1; i++) {
        if (arr[i] > arr[i - 1] && arr[i] > arr[i + 1]) {
            int left = i, right = i;
            while (left > 0 && arr[left] > arr[left - 1]) left--;
            while (right < arr.length - 1 && arr[right] > arr[right + 1]) right++;
            maxLen = Math.max(maxLen, right - left + 1);
        }
    }
    return maxLen;
}
```
---

## **6. Container with Most Water (Two Pointer Approach)**
```java
public int maxArea(int[] height) {
    int left = 0, right = height.length - 1, maxArea = 0;
    while (left < right) {
        maxArea = Math.max(maxArea, Math.min(height[left], height[right]) * (right - left));
        if (height[left] < height[right]) left++;
        else right--;
    }
    return maxArea;
}
```
---

## **7. Count Nice Subarrays (Sliding Window)**
```java
public int numberOfSubarrays(int[] nums, int k) {
    return atMost(nums, k) - atMost(nums, k - 1);
}
private int atMost(int[] nums, int k) {
    int left = 0, count = 0;
    for (int right = 0; right < nums.length; right++) {
        k -= nums[right] % 2;
        while (k < 0) k += nums[left++] % 2;
        count += right - left + 1;
    }
    return count;
}
```
---

## **8. Maximum Sum of a Subarray with at Most K Distinct Elements**
```java
public int maxSumWithKDistinct(int[] nums, int k) {
    Map<Integer, Integer> map = new HashMap<>();
    int left = 0, sum = 0, maxSum = 0;
    for (int right = 0; right < nums.length; right++) {
        sum += nums[right];
        map.put(nums[right], map.getOrDefault(nums[right], 0) + 1);
        while (map.size() > k) {
            sum -= nums[left];
            map.put(nums[left], map.get(nums[left]) - 1);
            if (map.get(nums[left]) == 0) map.remove(nums[left]);
            left++;
        }
        maxSum = Math.max(maxSum, sum);
    }
    return maxSum;
}
```
---

## **9. Find the Shortest Subarray with Degree**
```java
public int findShortestSubarray(int[] nums) {
    Map<Integer, Integer> count = new HashMap<>(), first = new HashMap<>();
    int degree = 0, minLen = Integer.MAX_VALUE;
    for (int i = 0; i < nums.length; i++) {
        count.put(nums[i], count.getOrDefault(nums[i], 0) + 1);
        first.putIfAbsent(nums[i], i);
        if (count.get(nums[i]) > degree) {
            degree = count.get(nums[i]);
            minLen = i - first.get(nums[i]) + 1;
        } else if (count.get(nums[i]) == degree) {
            minLen = Math.min(minLen, i - first.get(nums[i]) + 1);
        }
    }
    return minLen;
}
```
---

These are **10 advanced tricks** for Two Pointer and Sliding Window problems in **arrays**. ðŸš€ Let me know if you need more examples!

