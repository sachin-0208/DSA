**Depth-First Search (DFS) in Matrix-Based Problems**

## Overview
Depth-First Search (DFS) is a fundamental algorithm used for exploring and traversing graphs and matrices. It is particularly useful in matrix-related problems that involve connectivity, pathfinding, and component analysis. DFS can be implemented using either recursion or an explicit stack (iterative approach).

---

## **Basic Structure of DFS**
### **Recursive DFS**
```java
void dfs(char[][] grid, int i, int j, boolean[][] visited) {
    // Base case: Out of bounds or already visited
    if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || visited[i][j]) {
        return;
    }

    // Mark the cell as visited
    visited[i][j] = true;

    // Explore in four directions (up, down, left, right)
    dfs(grid, i + 1, j, visited); // Down
    dfs(grid, i - 1, j, visited); // Up
    dfs(grid, i, j + 1, visited); // Right
    dfs(grid, i, j - 1, visited); // Left
}
```
### **Iterative DFS (Using Stack)**
```java
import java.util.Stack;

void dfs(char[][] grid, int startI, int startJ) {
    int rows = grid.length, cols = grid[0].length;
    boolean[][] visited = new boolean[rows][cols];
    Stack<int[]> stack = new Stack<>();
    
    stack.push(new int[]{startI, startJ});

    while (!stack.isEmpty()) {
        int[] cell = stack.pop();
        int i = cell[0], j = cell[1];

        // Skip if out of bounds or already visited
        if (i < 0 || i >= rows || j < 0 || j >= cols || visited[i][j]) {
            continue;
        }

        // Mark as visited
        visited[i][j] = true;

        // Push neighbors (right, left, down, up) onto stack
        stack.push(new int[]{i, j + 1}); // Right
        stack.push(new int[]{i, j - 1}); // Left
        stack.push(new int[]{i + 1, j}); // Down
        stack.push(new int[]{i - 1, j}); // Up
    }
}
```

---

## **Applications of DFS in Matrix Problems**
### **1. Number of Islands (Leetcode 200)**
- Problem: Count the number of disconnected islands in a grid.
- Approach: Use DFS to traverse all connected '1's (land) and mark them as visited.

### **2. Flood Fill Algorithm (Leetcode 733)**
- Problem: Given an image represented as a 2D grid, replace all connected pixels of the same color starting from a given point.
- Approach: Use DFS to propagate the new color to all adjacent matching pixels.

### **3. Word Search (Leetcode 79)**
- Problem: Given a board of characters, determine if a word exists by moving in four directions.
- Approach: Use DFS with backtracking to explore all possible paths.

---

## **How to Use DFS Effectively**
1. **Determine when DFS is applicable**  
   - Useful for problems requiring connectivity, traversal, or pathfinding.
   - Suitable for problems where an entire region needs to be explored.

2. **Choose between recursive and iterative DFS**  
   - Recursive DFS is simpler but may cause stack overflow for large inputs.
   - Iterative DFS using an explicit stack avoids recursion depth issues.

3. **Use a visited set or modify the grid**  
   - If modifying the grid is allowed, marking visited cells with a placeholder (e.g., `'#'`) can optimize space.
   - Otherwise, maintain a separate `boolean[][] visited` array.

4. **Optimize where possible**  
   - Use **early stopping** in search problems.
   - Apply **pruning techniques** to cut unnecessary recursive calls.

---

## **Complexity Analysis**
- **Time Complexity:** \( O(m \times n) \) in most cases, as each cell is visited once.
- **Space Complexity:** \( O(m \times n) \) in recursive DFS (due to recursion stack) or \( O(m \times n) \) in iterative DFS (due to explicit stack or visited array).

---

DFS is a powerful algorithm for solving various matrix-related problems efficiently. It provides a fundamental approach for exploring grids, graphs, and backtracking solutions. Understanding DFS and its applications enables solving many classical algorithmic challenges effectively.

